class Card
types
	public CardID = nat;
	--public Rank = <A>|<Two>|<Three>|<Four>|<Five>|<Six>|<Seven>|<Eight>|<Nine>|<Ten>|<J>|<Q>|<K>;

	--public Value = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13];
-- TODO Define types here
values
	
instance variables
	id : nat1;
	suit : char;
	value : nat1;

operations
public Card : nat1 * char * nat1 ==> Card
	Card(cardid, nsuit, nvalue) ==
	   (
	   		id := cardid;
	      suit := nsuit;
	      value := nvalue;
	      
	      return self
	   )
pre
   (nvalue >= 1 and nvalue <= 13);

public pure getID : () ==> CardID
	getID() == return id;

public pure getSuit : () ==> char
	getSuit() == return suit;

public pure getValue : () ==> nat
	getValue() == return value;

functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Card