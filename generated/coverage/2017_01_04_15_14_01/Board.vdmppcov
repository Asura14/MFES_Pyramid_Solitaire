class Board
types

-- TODO Define types here
values
-- TODO Define values here
instance variables
public cards: seq of Card;

operations
public Board: Deck ==> Board
			Board(deck) == (
				cards := []; 
				for i = 1 to 28 do
				(
					cards := cards ^ [deck.cards(i)];
				);
				return self;
			)
post len cards = 28;

public selectCard : nat * nat ==> Card
	selectCard(row, col) == 
	( 
			if checkCardAtCoor(row, col) = true then (
				if checkFree(row, col) = true then (
					dcl cardIndex : nat := getCardIndex(row, col);
					return cards(cardIndex);
				);
			);
			return new Card(0,'N',0);
	)
	pre row > 0 and row < 8 and col < 8 and col > 0;

public removeCard : nat * nat ==> ()
	removeCard(row, col) == (
		dcl index : nat := getCardIndex(row, col);
		IO`println(index);
		IO`println(cards(index));
		cards(index) := new Card(0,'N',0);
		IO`println(cards(index));
	)
	post len cards = len cards~;
	
public checkCardAtCoor : nat * nat ==> bool
	checkCardAtCoor(row, col) == 
	(
		dcl index : nat := getCardIndex(row, col);
		if cards(index).getValue() > 0 then return true
		else return false;
	)
	pre row > 0 and row < 8 and col < 8 and col > 0;

public checkFree : nat * nat ==> bool
	checkFree(row, col) == 
	(
		if checkCardAtCoor(row + 1, col) = true then (
			if checkCardAtCoor(row+1, col+1) = true then return true;
		);
		return false
	)
	pre row > 0 and row < 8 and col < 8 and col > 0;

public getCardIndex : nat * nat ==> nat
		getCardIndex(row, col) ==
		(
			dcl index : nat := 0;
			for i = 1 to row do
			(
				for j = 1 to i do
				(
					index := index + 1;
					if i = row and j = col then return index;
				)
			);
			return index;
)
	pre row > 0 and row < 8 and col < 8 and col > 0;



functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Board