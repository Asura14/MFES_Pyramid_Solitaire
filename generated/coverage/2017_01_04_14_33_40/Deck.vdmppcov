class Deck 
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
-- TODO Define instance variables here
public cards : seq of Card;
public newCard : Card;
operations

public Deck: () ==> Deck
			Deck() == (
				cards := []; 

				for nvalue = 1 to 13 do
				(
					newCard := new Card(nvalue, 'S', nvalue);
					cards := cards ^ [newCard];
					newCard := new Card(nvalue + 13, 'C', nvalue);
					cards := cards ^ [newCard];
					newCard := new Card(nvalue + 26, 'H', nvalue);
					cards := cards ^ [newCard];
					newCard := new Card(nvalue + 39, 'D', nvalue);	
					cards := cards ^ [newCard];
				);
				return self;
			)
post len cards = 52;

public shuffleDeck : () ==> ()
	shuffleDeck() == 
	(
			dcl newIndex : nat1;
    	dcl tempCard : Card;
    	
    	for index = 1 to 100 do 
    	(
    		tempCard := cards(index);
    		newIndex := MATH`rand(52) + 1;
    		cards(index) := cards(newIndex);
    		cards(newIndex) := tempCard;
    	);
	)
	post len cards = 52;

public printDeck: () ==> ()
		printDeck() == ( IO`print(cards); )


functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Deck